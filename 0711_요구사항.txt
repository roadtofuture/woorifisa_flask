# 0. 가상환경 
  - 나중에 다른 서버에 이 서비스를 설치하더라고 오롯이 같은 패키지, 버전을 공유하기 위해
  $ python -m venv 가상환경명(myvenv)
  - 차곡차곡 우리가 이 서비스만을 위한 라이브러리를 쌓을 겁니다
  - pip upgrade
    - python.exe -m pip install --upgrade pip
  - flask 
    - pip install flask 

# 1. woorifisa 폴더에 
app.py로 시작하는 flask 프레임워크를 한 장의 파일을 만들 겁니다. 
- 1_app.py 참고

/about_me
  - 저는 __name__ 입니다

/hello :안녕하세요
/bye : 잘 가세요 



# 2. 어플리케이션 팩토리 방식 이용 -> 2_app 폴더의 __init__.py 참조
- create_app()  으로 시작하는 플라스크 앱으로 만들어 주시고
    - 모든 객체를 글로벌 속성으로 사용해서 생기는 오류를 막아줍니다

# 3. Blueprint를 통해 기능별로 view 분할 - app 폴더를 참조
- fisa/ 도메인을 앞에 붙여서 작동하도록 변경해주세요
    - fisa/about_me
    - fisa/hello
    - fisa/bye

# 4. view를 위한 Blueprint 하나 더 추가
- 본인이름/
    - 본인이름/about_me
    - 본인이름/hello
    - 본인이름/bye


# 5. flask-migrate 패키지를 통한 질문-답변 모델 생성
   - CRUD 

 - 질문 테이블은 
  - 외부적으로 : 번호, 작성자, 내용
  - 내부적으로 : 번호, 작성자, 내용, 
                수정여부를 무엇으로 기록할 것인지 
                  - 시간으로 타임스탬프를 사용하는 방법도 있습니다 
                  # - 횟수를 누적 저장하는 : 1, 2, 3, 4


 - 답변 테이블은
  - 외부적으로: 번호, 작성자, 내용
  - 내부적으로 : 번호, 작성자, 내용, 
               수정여부를 무엇으로 기록할 것인지,
               # - 시간으로 타임스탬프를 사용하는 방법도 있습니다 
               어떤 질문에 대한 답변인지 (Foreign Key로 걸어서 질문 번호를 연결)

  - config.py에 db에 관한 내용 작성
  - __init__.py에게 db에 관한 정보를 등록
  - ORM을 사용하는 이유 : 서로 다른 쿼리를 다 몰라도, 알아서 통역을 해준다
  - ORM 쿼리로 코드를 작성하지만 
    - 작업을 하고 나면 commit()을 해 주셔야 db에 적용됩니다. 
    - commit 하기 전에 작업하던 내용을 취소하고 싶다면 rollback()을 해주면 됩니다.

 - flask: HTML, JS, CSS 코드 사이에 파이썬 코드를 삽입해서 데이터를 가져오는 Jinja 라는 템플릿을 사용합니다. 
 - jinja 템플릿이 shell 커맨드를 기반으로 한 ORM을 사용합니다.

 (myvenv) C:\ITStudy\06_flask\woorifisa\woorifisa>flask shell 
Python 3.10.9 | packaged by Anaconda, Inc. | (main, Mar  1 2023, 18:18:15) [MSC v.1916 64 bit (AMD64)] on win32
App: app

>>> from app.models import Question 
>>> from datetime import datetime
>>> q = Question(subject="첫 질문입니다", content="내용이 무엇인가요", create_date=datetime.now())
>>> from app import db
>>> db.session.add(q)
>>> db.session.commit()
>>> exit()

 - models.py에 클래스를 만든다
 - __init__에 알려준다
 - views에서 쓴다고 import 

 - flask db migrate
 - flask db upgrade

 >>> from app.models import Question, Answer
>>> from datetime import datetime
>>> from app import db
>>> a = Answer(content="첫 질문에 대한 대답입니다", create_date=datetime.now(), question_id=1)
>>> a
<Answer (transient 2318883932864)>db
>>> db.session.add(a)
>>> a2 = Answer(content="첫 질문에 대한 두번째 대답입니다", create_date=datetime.now(), question_id=1)
>>> db.session.add(a2) 
>>> db.session.commit()   


>>> from app.models import Question, Answer
>>> from datetime import datetime
>>> from app import db
>>> a = Answer(content="첫 질문에 대한 대답입니다", create_date=datetime.now(), question_id=1)
>>> a
<Answer (transient 2318883932864)>
>>> db.session.add(a)
>>> a2 = Answer(content="첫 질문에 대한 두번째 대답입니다", create_date=datetime.now(), question_id=1)
>>> db.session.add(a2)
>>> db.session.commit()
>>> Question.query.all()
[<Question 1>, <Question 2>]
>>> Question.query.filter() 
<flask_sqlalchemy.query.Query object at 0x0000021BE840F400>
>>> Question.query.filter(Question.id==2) 
<flask_sqlalchemy.query.Query object at 0x0000021BE840E800>
>>> Question.query.filter(Question.id==2).all()
[<Question 2>]
>>> select * from question where id=2; 
  File "<console>", line 1
    select * from question where id=2;
             ^^^^
SyntaxError: invalid syntax
>>> Question.query.get(2)                       
<Question 2>
>>> Question.query.filter(Question.subject.like('%글%').all() 
... ]
  File "<console>", line 2
    ]
    ^
SyntaxError: closing parenthesis ']' does not match opening parenthesis '(' on line 1>>> Question.query.filter(Question.subject.like('%글%')).all() 
[<Question 2>]
>>> Question.query.filter(Question.content.like('%내용%')).all() 
[<Question 1>, <Question 2>]
>>> Question.query.filter(Question.subject.like('%글')).all()    
[]
>>> Question.query.filter(Question.subject.like('글')).all()  
[]
>>> q = Question.query.get(2)                                    
>>> q
<Question 2>
>>> q.subject
'두번째 글입입니다'
>>> q.content
'내용이 무엇인가요'
>>> q.subject = '두번째 글입니다 2'
>>> q.subject 
'두번째 글입니다 2'
>>> db.session.commit()


# 삭제
>>> q = Question(subject="첫 질문입니다", content="내용이 무엇인가요", create_date=datetime.now())
>>> db.session.add(q)
>>> db.session.commit()
>>> Question.query.all()
[<Question 1>, <Question 2>, <Question 3>]
>>> q = Question.query.get(3)
>>> q
<Question 3>
>>> q.subject
'첫 질문입니다'
>>> db.session.delete(q)
>>> db.commit()


# post_list.html에 값을 전달하는 post를 완성해주세요.